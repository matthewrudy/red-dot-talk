Who am i?
(picture of me)

  Matthew Rudy
  马泰
  
I have ear hair

  (but I don't have time to talk about that)

Why is finance different?
(fat banker vs fat coder)

  Smaller User Base

  Less about being pretty

  "If you f**k up, you're f**ked"

  ... but ... you may have all night to fix it

10 Key approaches

  1. Data Integrity
  2. State Machines
  3. Pessimistic Locking
  4. Audit
  5. Currency
  6. Ledgers
  7. Rounding
  8. System Security
  9. Data Security
  10. ?
  
1. Data Integrity

  Foreign Keys
  CHECK constraints
  Partial Indexes
  Encryption
  
  (I suggest you use Postgres)

2. State Machines

  Everything is a process!
  
  A loan must only be disbursed once!
  A payment must only be made once!
  We must only refund someone once!
  
  class SomeProcess < ActiveRecord::Base
    super_state :pending, :initial => true
    super_state :processing
    super_state :completed
    super_state :failed

    super_state_group :outstanding, ["pending", "processing"]
  end
  
  https://github.com/matthewrudy/super_state
  
3. Pessimistic Locking

  If something goes wrong
  I f**ked up
  I need to fix it
  
  class SomeProcess < ActiveRecord::Base
    # kick of the process
    state_transition :start_processing, :pending => :processing

    # finish it off
    state_transition :complete_processing, :processing => :completed
    
    def process!
      ensure_super_state!(:pending) do
        self.start_processing!
      end
      
      # do our stuff
      
      complete_processing!
    end
  end
    

4. Audit

  We need to know who did what
  and when
  
  def audit_this!
    ActionAudit.audit!(
      :ip => request.remote_ip,
      :controller => params[:controller],
      :action     => params[:action],
      :params     => request.filtered_parameters,
      :flash      => flash,
      :status     => status,
      :http_verb  => request.request_method,
      :user       => current_user
      )
  rescue Exception => e
    logger.error("Auditing is broken: #{e.message}")
  end
  
  after_filter :audit_this
  
5. Currency

  Do we store as Float, Decimal, or Integer?
  
  100_000.00 US Dollars
   50_000.00 British Pounds
  600_000.00 Hong Kong Dollars
  
   1_000_000  Korean Won?
  
  We have to store it as an Integer.
  
  Integer plus Currency Code.
  
7. Rounding

  (picture from that film)
  
8. System Security

  Let someone else do the work!
  
  User permissioning
  * Devise
  * CanCan
  * strong passwords
  
  Firewall
  * different IP address for SSH access
  * whitelist IP addresses for SSH access
  * non-standard port for SSH access
  
  Chef
  * creates user accounts
  * configures SSH security (no root login, no passwords)
  * configures Postgres security (access limited to local ips, specific users, and specific databases)
  * only run the services we need
  
9. Data Security

  Don't leave your laptop on the train!
  
  If you don't have the data on your machine
  you can't lose it.
  
  Rules
  * no client data outside the data centre
  * local development uses obfuscated data
  